function newton_cradle_visualization(csv_path, output_dir)
%NEWTON_CRADLE_VISUALIZATION Render Newton's cradle data and save PNG frames.
%   newton_cradle_visualization(csv_path, output_dir) reads the CSV exported by
%   the C example (examples/newton_cradle) and produces diagnostic plots plus a
%   PNG frame sequence and GIF animation under output_dir.
%
%   csv_path   : Path to the CSV file generated by the simulation. When omitted,
%                defaults to ../data/newton_cradle.csv relative to this script.
%   output_dir : Directory to store PNG frames and the GIF animation. Defaults
%                to ./newton_cradle_frames relative to the current folder.
%
%   The script generates:
%     * trajectory_plot.png      : XY traces of all bobs over time.
%     * energy_plot.png          : Kinetic + potential energy profiles.
%     * frame_XXXX.png           : PNG frames (one per time sample).
%     * newton_cradle.gif        : Quick-look animation assembled from frames.
%
%   Example:
%     newton_cradle_visualization('../data/newton_cradle.csv', 'frames')

    if nargin < 1 || isempty(csv_path)
        here = fileparts(mfilename('fullpath'));
        csv_path = fullfile(here, '..', 'data', 'newton_cradle.csv');
    end
    if nargin < 2 || isempty(output_dir)
        output_dir = 'newton_cradle_frames';
    end

    if exist(csv_path, 'file') ~= 2
        error('CSV file not found: %s', csv_path);
    end

    if exist(output_dir, 'dir') ~= 7
        mkdir(output_dir);
    end

    data = readtable(csv_path);
    time = data.time;
    num_samples = numel(time);

    positions = zeros(num_samples, 4, 2);
    velocities = zeros(num_samples, 4, 2);

    positions(:, 1, 1) = data.x1;
    positions(:, 1, 2) = data.y1;
    velocities(:, 1, 1) = data.vx1;
    velocities(:, 1, 2) = data.vy1;

    positions(:, 2, 1) = data.x2;
    positions(:, 2, 2) = data.y2;
    velocities(:, 2, 1) = data.vx2;
    velocities(:, 2, 2) = data.vy2;

    positions(:, 3, 1) = data.x3;
    positions(:, 3, 2) = data.y3;
    velocities(:, 3, 1) = data.vx3;
    velocities(:, 3, 2) = data.vy3;

    positions(:, 4, 1) = data.x4;
    positions(:, 4, 2) = data.y4;
    velocities(:, 4, 1) = data.vx4;
    velocities(:, 4, 2) = data.vy4;

    % Constants mirrored from the simulation setup.
    pivot_height = 0.5;
    bob_radius = 0.1;
    bob_mass = 0.45;
    g = 9.81;
    anchor_spacing = 0.2;
    anchor_offset = (4 - 1) * 0.5 * anchor_spacing;
    anchor_x = (-anchor_offset):anchor_spacing:(anchor_offset);

    %% Trajectory plot (plan view).
    fig_traj = figure('Name', 'Newton Cradle Trajectories', 'Visible', 'off');
    hold on;
    colors = lines(4);
    for i = 1:4
        plot(positions(:, i, 1), positions(:, i, 2), 'Color', colors(i, :), 'LineWidth', 1.5);
    end
    xlabel('X position (m)');
    ylabel('Y position (m)');
    title('Newton''s Cradle Pendulum Trajectories');
    axis equal;
    grid on;
    legend({'Bob 1', 'Bob 2', 'Bob 3', 'Bob 4'}, 'Location', 'southoutside', 'Orientation', 'horizontal');
    trajectory_path = fullfile(output_dir, 'trajectory_plot.png');
    exportgraphics(fig_traj, trajectory_path, 'Resolution', 200);
    close(fig_traj);

    %% Energy plot (kinetic + potential).
    h_vec = pivot_height - positions(:, :, 2);
    speed_sq = sum(velocities.^2, 3);
    kinetic = 0.5 * bob_mass * sum(speed_sq, 2);
    potential = bob_mass * g * sum(h_vec, 2);
    total_energy = kinetic + potential;

    fig_energy = figure('Name', 'Newton Cradle Energy', 'Visible', 'off');
    plot(time, kinetic, 'LineWidth', 1.2);
    hold on;
    plot(time, potential, 'LineWidth', 1.2);
    plot(time, total_energy, 'k', 'LineWidth', 1.5);
    xlabel('Time (s)');
    ylabel('Energy (J, arbitrary scale)');
    legend({'Kinetic', 'Potential', 'Total'}, 'Location', 'best');
    title('Energy Transfer Over Time');
    grid on;
    energy_path = fullfile(output_dir, 'energy_plot.png');
    exportgraphics(fig_energy, energy_path, 'Resolution', 200);
    close(fig_energy);

    %% Animation frames and GIF.
    frame_stride = max(1, floor(num_samples / 300)); % limit to ~300 frames
    gif_path = fullfile(output_dir, 'newton_cradle.gif');
    gif_initialized = false;

    fig_anim = figure('Name', 'Newton Cradle Animation', 'Visible', 'off');
    axis_limits = [min(anchor_x) - 0.4, max(anchor_x) + 0.4, -0.9, 0.7];

    for idx = 1:frame_stride:num_samples
        clf(fig_anim);
        hold on;
        set(gca, 'DataAspectRatio', [1 1 1]);
        xlim(axis_limits(1:2));
        ylim(axis_limits(3:4));
        grid on;
        box on;

        % Overhead support bar.
        plot([anchor_x(1) - 0.15, anchor_x(end) + 0.15], [pivot_height, pivot_height], 'k-', 'LineWidth', 2);

        for body_idx = 1:4
            bob_pos = positions(idx, body_idx, :);
            bob_x = bob_pos(1, 1, 1);
            bob_y = bob_pos(1, 1, 2);

            plot([anchor_x(body_idx), bob_x], [pivot_height, bob_y], '-', 'Color', [0.2, 0.2, 0.2], 'LineWidth', 1.5);
            rectangle('Position', [bob_x - bob_radius, bob_y - bob_radius, 2 * bob_radius, 2 * bob_radius], ...
                      'Curvature', [1, 1], ...
                      'FaceColor', colors(body_idx, :), ...
                      'EdgeColor', [0.1, 0.1, 0.1], ...
                      'LineWidth', 1.0);
        end

        title(sprintf('Newton''s Cradle (t = %.3f s)', time(idx)));
        xlabel('X (m)');
        ylabel('Y (m)');

        drawnow;

        frame = getframe(fig_anim);
        [img, cmap] = frame2im(frame);
        png_name = sprintf('frame_%04d.png', idx);
        imwrite(img, fullfile(output_dir, png_name));

        if isempty(cmap)
            [img_ind, cmap] = rgb2ind(img, 256);
        else
            img_ind = img;
        end

        delay = 0.03; % seconds per frame in GIF
        if ~gif_initialized
            imwrite(img_ind, cmap, gif_path, 'gif', 'LoopCount', inf, 'DelayTime', delay);
            gif_initialized = true;
        else
            imwrite(img_ind, cmap, gif_path, 'gif', 'WriteMode', 'append', 'DelayTime', delay);
        end
    end

    close(fig_anim);
    fprintf('PNG frames written to %s\n', output_dir);
    fprintf('Trajectory plot: %s\n', trajectory_path);
    fprintf('Energy plot: %s\n', energy_path);
    fprintf('Animated GIF: %s\n', gif_path);
end
