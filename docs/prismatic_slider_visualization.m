function prismatic_slider_visualization(csv_path, output_dir)
%PRISMATIC_SLIDER_VISUALIZATION Plot and animate slider demo results.
%   prismatic_slider_visualization(csv_path, output_dir) loads the CSV file
%   generated by examples/prismatic_slider and produces diagnostic plots,
%   PNG frames, and a GIF animation illustrating the slider motion, motor
%   force, and limit activity.
%
%   csv_path   : Path to the CSV output (default ../data/prismatic_slider.csv).
%   output_dir : Directory to store generated images (default ./prismatic_frames).

    if nargin < 1 || isempty(csv_path)
        here = fileparts(mfilename('fullpath'));
        csv_path = fullfile(here, '..', 'data', 'prismatic_slider.csv');
    end
    if nargin < 2 || isempty(output_dir)
        output_dir = 'prismatic_frames';
    end

    if exist(csv_path, 'file') ~= 2
        error('CSV file not found: %s', csv_path);
    end
    if exist(output_dir, 'dir') ~= 7
        mkdir(output_dir);
    end

    data = readtable(csv_path);
    time = data.time;
    x = data.x;
    vx = data.vx;
    translation = data.translation;
    motor_force = data.motor_force;
    limit_force = data.limit_force;
    limit_spring_force = data.limit_spring_force;
    motor_speed = data.motor_speed;
    limit_state = data.limit_state;
    motor_mode = data.motor_mode;
    position_target = data.position_target;
    position_gain = data.position_gain(1);
    limit_lower = data.limit_lower;
    limit_upper = data.limit_upper;

    lower_val = limit_lower(1);
    upper_val = limit_upper(1);

    %% Translation vs limits plot
    fig_translation = figure('Name', 'Slider Translation', 'Visible', 'off');
    hold on;
    fill([time; flipud(time)], [upper_val*ones(size(time)); lower_val*ones(size(time))], ...
         [0.9 0.95 1.0], 'EdgeColor', 'none', 'FaceAlpha', 0.4);
    plot(time, translation, 'LineWidth', 1.4);
    yline(upper_val, 'Color', [0.8 0.2 0.2], 'LineStyle', '--');
    yline(lower_val, 'Color', [0.8 0.2 0.2], 'LineStyle', '--');
    plot(time, position_target, 'k--', 'LineWidth', 1.0);
    title('Slider Translation Over Time');
    xlabel('Time (s)');
    ylabel('Translation along axis (m)');
    legend({'Limit band', 'Translation', 'Upper limit', 'Lower limit', 'Position target'}, 'Location', 'best');
    grid on;
    translation_path = fullfile(output_dir, 'translation_plot.png');
    exportgraphics(fig_translation, translation_path, 'Resolution', 200);
    close(fig_translation);

    %% Motor & limit impulses plot
    fig_impulse = figure('Name', 'Motor/Limit Response', 'Visible', 'off');
    yyaxis left;
    plot(time, motor_force, 'LineWidth', 1.3);
    ylabel('Motor impulse (N)');
    yyaxis right;
    plot(time, limit_force, 'LineWidth', 1.1);
    hold on;
    plot(time, limit_spring_force, 'LineWidth', 1.1, 'LineStyle', '--');
    ylabel('Limit forces (N)');
    xlabel('Time (s)');
    title('Motor & Limit Impulse History');
    legend({'Motor', 'Hard limit', 'Soft spring'}, 'Location', 'best');
    grid on;
    impulse_path = fullfile(output_dir, 'impulse_plot.png');
    exportgraphics(fig_impulse, impulse_path, 'Resolution', 200);
    close(fig_impulse);

    %% Motor speed vs actual velocity
    fig_speed = figure('Name', 'Motor Speed Tracking', 'Visible', 'off');
    plot(time, motor_speed, 'LineWidth', 1.2);
    hold on;
    plot(time, vx, 'LineWidth', 1.1);
    xlabel('Time (s)');
    ylabel('Speed (m/s)');
    legend({'Commanded', 'Actual vx'}, 'Location', 'best');
    title('Motor Speed vs Slider Velocity');
    grid on;
    speed_path = fullfile(output_dir, 'motor_speed_plot.png');
    exportgraphics(fig_speed, speed_path, 'Resolution', 200);
    close(fig_speed);

    %% Animation
    fig_anim = figure('Name', 'Slider Animation', 'Visible', 'off');
    track_half = max(abs([translation; lower_val; upper_val])) + 0.12;
    x_limits = [-track_half, track_half];
    y_limits = [-0.2, 0.2];
    frame_stride = max(1, floor(numel(time) / 250));
    gif_path = fullfile(output_dir, 'prismatic_slider.gif');
    gif_initialized = false;

    for idx = 1:frame_stride:numel(time)
        clf(fig_anim);
        axes('Parent', fig_anim);
        hold on;
        set(gca, 'DataAspectRatio', [1 1 1]);
        xlim(x_limits);
        ylim(y_limits);
        grid on;
        box on;

        % Draw guide track and limits
        plot(x_limits, [0 0], 'k-', 'LineWidth', 1.5);
        plot([lower_val lower_val], y_limits, 'Color', [0.8 0.2 0.2], 'LineStyle', '--', 'LineWidth', 1.1);
        plot([upper_val upper_val], y_limits, 'Color', [0.8 0.2 0.2], 'LineStyle', '--', 'LineWidth', 1.1);

        double_slider_pos = translation(idx);
        rectangle('Position', [double_slider_pos - 0.08, -0.08, 0.16, 0.16], ...
                  'FaceColor', [0.1 0.4 0.8], ...
                  'EdgeColor', [0.1 0.1 0.1], ...
                  'LineWidth', 1.2);

        if limit_state(idx) ~= 0
            text(double_slider_pos, 0.12, sprintf('Limit %d', limit_state(idx)), ...
                 'HorizontalAlignment', 'center', 'Color', [0.8 0.2 0.2]);
        end

        title(sprintf('t = %.2f s  |  mode=%d  |  kp=%.2f', time(idx), motor_mode(idx), position_gain));
        xlabel('Axis (m)');
        ylabel('Offset (m)');

        drawnow;

        frame = getframe(fig_anim);
        [img, cmap] = frame2im(frame);
        png_name = sprintf('frame_%04d.png', idx);
        imwrite(img, fullfile(output_dir, png_name));

        if isempty(cmap)
            [img_idx, cmap] = rgb2ind(img, 256);
        else
            img_idx = img;
        end
        if ~gif_initialized
            imwrite(img_idx, cmap, gif_path, 'gif', 'LoopCount', inf, 'DelayTime', 0.03);
            gif_initialized = true;
        else
            imwrite(img_idx, cmap, gif_path, 'gif', 'WriteMode', 'append', 'DelayTime', 0.03);
        end
    end

    close(fig_anim);

    fprintf('Prismatic slider plots saved to %s\n', output_dir);
    fprintf('Translation plot: %s\n', translation_path);
    fprintf('Impulse plot: %s\n', impulse_path);
    fprintf('Motor speed plot: %s\n', speed_path);
    fprintf('Animation GIF: %s\n', gif_path);
end
