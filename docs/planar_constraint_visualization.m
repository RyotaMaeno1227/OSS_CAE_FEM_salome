function planar_constraint_visualization(csv_path, output_dir)
%PLANAR_CONSTRAINT_VISUALIZATION Plot and animate planar joint demo results.
%   planar_constraint_visualization(csv_path, output_dir) loads the CSV file
%   generated by examples/planar_constraint_demo and produces diagnostic
%   plots together with a GIF animation illustrating the dual-axis motion,
%   motor forces, and limit engagement.
%
%   csv_path   : Path to the CSV output (default ../data/planar_constraint.csv).
%   output_dir : Directory to store generated images (default ./planar_frames).

    if nargin < 1 || isempty(csv_path)
        here = fileparts(mfilename('fullpath'));
        csv_path = fullfile(here, '..', 'data', 'planar_constraint.csv');
    end
    if nargin < 2 || isempty(output_dir)
        output_dir = 'planar_frames';
    end

    if exist(csv_path, 'file') ~= 2
        error('CSV file not found: %s', csv_path);
    end
    if exist(output_dir, 'dir') ~= 7
        mkdir(output_dir);
    end

    data = readtable(csv_path);
    time = data.time;
    pos_x = data.pos_x;
    pos_y = data.pos_y;
    angle = data.angle;
    vx = data.vx;
    vy = data.vy;
    omega = data.omega;
    tx = data.translation_x;
    ty = data.translation_y;
    orientation_error = data.orientation_error;
    orientation_target = data.orientation_target;
    motor_force_x = data.motor_force_x;
    motor_force_y = data.motor_force_y;
    limit_force_x = data.limit_force_x;
    limit_force_y = data.limit_force_y;
    limit_spring_force_x = data.limit_spring_force_x;
    limit_spring_force_y = data.limit_spring_force_y;
    motor_target_x = data.motor_target_x;
    motor_target_y = data.motor_target_y;
    limit_state_x = data.limit_state_x;
    limit_state_y = data.limit_state_y;
    limit_lower_y = data.limit_lower_y(1);
    limit_upper_y = data.limit_upper_y(1);
    stage = data.stage;

    %% Translation plot
    fig_translation = figure('Name', 'Planar Translation', 'Visible', 'off');
    tiledlayout(fig_translation, 2, 1, 'TileSpacing', 'compact');

    nexttile;
    plot(time, tx, 'LineWidth', 1.4);
    hold on;
    plot(time, motor_target_x, 'k--', 'LineWidth', 1.1);
    ylabel('Translation X (m)');
    xlabel('Time (s)');
    grid on;
    legend({'Translation X', 'Motor target X'}, 'Location', 'best');
    title('Axis-X Translation');

    nexttile;
    fill([time; flipud(time)], [limit_upper_y * ones(size(time)); limit_lower_y * ones(size(time))], ...
         [0.92 0.95 1.0], 'EdgeColor', 'none', 'FaceAlpha', 0.4);
    hold on;
    plot(time, ty, 'LineWidth', 1.4);
    plot(time, motor_target_y, 'k--', 'LineWidth', 1.1);
    yline(limit_upper_y, '--', 'Color', [0.8 0.2 0.2]);
    yline(limit_lower_y, '--', 'Color', [0.8 0.2 0.2]);
    xlabel('Time (s)');
    ylabel('Translation Y (m)');
    legend({'Limit band', 'Translation Y', 'Motor target Y', 'Upper limit', 'Lower limit'}, 'Location', 'best');
    grid on;
    title('Axis-Y Translation with Limits');

    translation_path = fullfile(output_dir, 'translation_planar.png');
    exportgraphics(fig_translation, translation_path, 'Resolution', 200);
    close(fig_translation);

    %% Orientation tracking
    fig_orientation = figure('Name', 'Orientation Tracking', 'Visible', 'off');
    plot(time, orientation_target, 'k--', 'LineWidth', 1.2);
    hold on;
    plot(time, orientation_target + orientation_error, 'LineWidth', 1.4);
    yyaxis right;
    plot(time, orientation_error, 'LineWidth', 1.0, 'LineStyle', ':');
    ylabel('Error (rad)');
    yyaxis left;
    ylabel('Angle (rad)');
    xlabel('Time (s)');
    legend({'Target', 'Actual angle', 'Error'}, 'Location', 'best');
    title('Planar Orientation Tracking');
    grid on;
    orientation_path = fullfile(output_dir, 'orientation_plot.png');
    exportgraphics(fig_orientation, orientation_path, 'Resolution', 200);
    close(fig_orientation);

    %% Motor and limit forces
    fig_forces = figure('Name', 'Motor and Limit Forces', 'Visible', 'off');
    tiledlayout(fig_forces, 2, 1, 'TileSpacing', 'compact');

    nexttile;
    plot(time, motor_force_x, 'LineWidth', 1.3);
    hold on;
    plot(time, motor_force_y, 'LineWidth', 1.3);
    ylabel('Motor force (N)');
    legend({'Axis X', 'Axis Y'}, 'Location', 'best');
    grid on;
    title('Motor Forces');

    nexttile;
    plot(time, limit_force_y, 'LineWidth', 1.2);
    hold on;
    plot(time, limit_spring_force_y, '--', 'LineWidth', 1.1);
    ylabel('Limit response (N)');
    xlabel('Time (s)');
    legend({'Hard limit (Y)', 'Soft spring (Y)'}, 'Location', 'best');
    grid on;
    title('Limit Response (Axis Y)');

    forces_path = fullfile(output_dir, 'forces_plot.png');
    exportgraphics(fig_forces, forces_path, 'Resolution', 200);
    close(fig_forces);

    %% Stage timeline
    fig_stage = figure('Name', 'Scenario Stages', 'Visible', 'off');
    stairs(time, stage, 'LineWidth', 1.4);
    ylim([min(stage) - 0.5, max(stage) + 0.5]);
    xlabel('Time (s)');
    ylabel('Stage id');
    grid on;
    title('Scenario Stage Timeline');
    stage_path = fullfile(output_dir, 'stage_timeline.png');
    exportgraphics(fig_stage, stage_path, 'Resolution', 200);
    close(fig_stage);

    %% Animation
    fig_anim = figure('Name', 'Planar Constraint Animation', 'Visible', 'off');
    anchor_pt = [0, 0];
    rect_local = [-0.16, -0.09;
                   0.16, -0.09;
                   0.16,  0.09;
                  -0.16,  0.09];
    frame_stride = max(1, floor(numel(time) / 250));
    extents = max(max(abs(pos_x)) + 0.4, max(abs(pos_y)) + 0.4);
    gif_path = fullfile(output_dir, 'planar_constraint.gif');
    gif_initialized = false;

    for idx = 1:frame_stride:numel(time)
        clf(fig_anim);
        axes('Parent', fig_anim);
        hold on;
        set(gca, 'DataAspectRatio', [1 1 1]);
        xlim([-extents, extents]);
        ylim([-extents, extents]);
        grid on;
        box on;

        % Draw anchor
        plot(anchor_pt(1), anchor_pt(2), 'ks', 'MarkerFaceColor', [0.2 0.2 0.2], 'MarkerSize', 8);

        % Draw limit bands in Y (if active)
        yline(limit_upper_y, '--', 'Color', [0.8 0.2 0.2], 'LineWidth', 1.1);
        yline(limit_lower_y, '--', 'Color', [0.8 0.2 0.2], 'LineWidth', 1.1);

        % Slider rectangle
        theta = angle(idx);
        R = [cos(theta), -sin(theta); sin(theta), cos(theta)];
        rect_world = (R * rect_local')';
        rect_world(:, 1) = rect_world(:, 1) + pos_x(idx);
        rect_world(:, 2) = rect_world(:, 2) + pos_y(idx);
        patch('Vertices', rect_world, 'Faces', [1 2 3 4], ...
              'FaceColor', [0.1 0.5 0.85], ...
              'EdgeColor', [0.1 0.1 0.1], ...
              'LineWidth', 1.3);

        % Draw orientation vector
        orient_vec = [cos(theta), sin(theta)] * 0.25;
        quiver(pos_x(idx), pos_y(idx), orient_vec(1), orient_vec(2), 0, ...
               'Color', [0.0 0.3 0.7], 'LineWidth', 1.4, 'MaxHeadSize', 0.6);

        % Display stage and limit status
        text(anchor_pt(1) - extents * 0.9, anchor_pt(2) + extents * 0.9, ...
             sprintf('t = %.2f s | stage = %d | limitY = %d', ...
                     time(idx), stage(idx), limit_state_y(idx)), ...
             'FontWeight', 'bold');

        xlabel('World X (m)');
        ylabel('World Y (m)');
        title('Planar Constraint Motion');

        drawnow;

        frame = getframe(fig_anim);
        [img, cmap] = frame2im(frame);
        png_name = sprintf('frame_%04d.png', idx);
        imwrite(img, fullfile(output_dir, png_name));

        if isempty(cmap)
            [img_idx, cmap] = rgb2ind(img, 256);
        else
            img_idx = img;
        }
        if ~gif_initialized
            imwrite(img_idx, cmap, gif_path, 'gif', 'LoopCount', inf, 'DelayTime', 0.03);
            gif_initialized = true;
        else
            imwrite(img_idx, cmap, gif_path, 'gif', 'WriteMode', 'append', 'DelayTime', 0.03);
        end
    end

    close(fig_anim);

    fprintf('Planar constraint plots saved to %s\n', output_dir);
    fprintf('Translation plot: %s\n', translation_path);
    fprintf('Orientation plot: %s\n', orientation_path);
    fprintf('Forces plot: %s\n', forces_path);
    fprintf('Stage timeline: %s\n', stage_path);
    fprintf('Animation GIF: %s\n', gif_path);
end
